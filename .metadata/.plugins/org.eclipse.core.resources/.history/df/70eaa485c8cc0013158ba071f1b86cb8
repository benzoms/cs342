
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.*;
import java.net.*;
import java.util.ArrayList;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;

public class ChatPanel extends JPanel implements Runnable, ActionListener, WindowListener,
		KeyListener {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	public String _serverHostname = "localhost";
	public int _serverPort = 5217;

	/**
	 * GUI Components
	 */
	private JFrame _chatZoo; // overall frame
	private JTextArea _chatDisplay; // displays chat messages
	private JTextField _chatBox; // user text box
	private JPanel _userPanel;
	private ArrayList<JCheckBox> _userCheckboxes;
	private JButton _sendButton; // submit user chat message
 
	/**
	 * User Settings
	 */
	private String _buddy;
	private String _userName;

	/**
	 * Socket Settings
	 */
	private Socket _soc;
	private Thread _daemon = null;
	private DataOutputStream _outStream;
	private DataInputStream _inStream;

	public ChatPanel(){
		// initialize GUI Components
		initializeGUI();
		// initialize User and Socket Settings
		
		
		/////////////initializeSettings("$REPLACE_TOKEN$", buddy);
	}

	public ChatPanel(String userName, String buddy, String hostname, int port) throws Exception {
		this._serverHostname = hostname;
		this._serverPort = port;
		
		// initialize GUI Components
		initializeGUI();
		// initialize User and Socket Settings
		initializeSettings(userName, buddy);
	}

	public JFrame getFrame() {
		return _chatZoo;
	}

	// Initializes contents of frame
	private void initializeGUI() {
		this.setBackground(new Color(176, 196, 222));
		this.setBounds(0, 0, 640, 370);
		//this.addWindowListener(this);
		this.setLayout(null);

		_chatDisplay = new JTextArea();
		_chatDisplay.setEditable(false);
		_chatDisplay.setBounds(16, 29, 415, 234);
		this.add(_chatDisplay);

		_chatBox = new JTextField();
		_chatBox.setBounds(16, 285, 285, 40);
		_chatBox.addKeyListener(this);
		this.add(_chatBox);

		_userPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
		_userPanel.setBounds(454, 25, 160, 300);
		this.add(_userPanel);

		_userCheckboxes = new ArrayList<JCheckBox>();

		JLabel lblOnlineUsers = new JLabel("ONLINE USERS");
		lblOnlineUsers.setForeground(new Color(0, 0, 0));
		lblOnlineUsers.setFont(new Font("Franklin Gothic Medium", Font.PLAIN,
				13));
		lblOnlineUsers.setBounds(474, 6, 80, 16);
		this.add(lblOnlineUsers);

		_sendButton = new JButton("SUBMIT");
		_sendButton.setIcon(new ImageIcon("monkey.png"));
		_sendButton.setFont(new Font("Franklin Gothic Medium", Font.PLAIN, 13));
		_sendButton.setBounds(313, 285, 120, 40);
		_sendButton.addActionListener(this);

		this.add(_sendButton);
	}

	private void initializeSettings(String userName, String buddy)
			throws Exception {
		_userName = userName;
		_buddy = buddy;
		_soc = new Socket(this._serverHostname, this._serverPort);

		_chatZoo.setTitle("CHATROOM ZOO - " + userName);

		_inStream = new DataInputStream(_soc.getInputStream());
		_outStream = new DataOutputStream(_soc.getOutputStream());
		_outStream.writeUTF(userName);

		_daemon = new Thread(this);
		_daemon.start();
	}

	public void run() {
		while (true) {
			try {
				String[] msgArray = _inStream.readUTF().split("\\|\\|");
				if (msgArray.length > 1) {
					if (msgArray[0].equals("$YOUR_NAME$")) {

						_userName = msgArray[1];
						_chatZoo.setTitle("CHATROOM ZOO - " + _userName);

						_chatZoo.validate();
						_chatZoo.repaint();

					} else if (msgArray[0].equals("$DATA$")) {
						_chatDisplay.append("\n" + msgArray[1]);
					} else if (msgArray[0].equals("$ERROR$")) {
						_chatDisplay.append("\n" + msgArray[1]);
					} else if (msgArray[0].equals("$USERS$")) {
						// Relay update list of online users to everyone
						_outStream.writeUTF(formatMsgToSrv("$UPDATE$",
								msgArray[1].trim()));
					} else if (msgArray[0].equals("$UPDATE$")) {
						// update list of online users

						_userPanel.removeAll();
						_userCheckboxes.clear();

						// adds new check box for every user
						String[] userArray = msgArray[1].trim().split("\\~");
						for (String user : userArray) {

							JCheckBox newCheckBox = new JCheckBox(user);
							newCheckBox.setSelected(isBuddy(user));
							if (user.equals(_userName))
								newCheckBox.setEnabled(false);
							newCheckBox.addActionListener(this);

							_userPanel.add(newCheckBox);
							_userCheckboxes.add(newCheckBox);
						}

						_userPanel.revalidate();
						_userPanel.repaint();
						_chatZoo.validate();
						_chatZoo.repaint();

					}
				}

			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
	}

	/**
	 * Build a tokenize string that the server knows how to parse
	 * 
	 * @param msg
	 *            Text from input box
	 * @return Tokenize message to server
	 */
	private String formatMsgToSrv(String action, String msg) {
		if (action.equals("$UPDATE$"))
			return String.format("%s %s %s %s", action, _buddy, action, msg);
		else
			return String.format("%s %s %s %s", _userName, _buddy, action, msg);
	}

	private String formatMsgToSrv(String action) {
		return formatMsgToSrv(action, "");
	}

	private void sendMessage() {
		try {
			String msg = _chatBox.getText().toString();
			_outStream.writeUTF(formatMsgToSrv("$DATA$", msg));
			_chatBox.setText("");
		} catch (Exception ex) {
		}
	}

	private boolean isBuddy(String user) {
		return _buddy.equals("$PUBLIC$") || _buddy.indexOf(user) != -1;
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if (e.getSource().equals(_sendButton)) {
			sendMessage();
		} else if (_userCheckboxes.contains(e.getSource())) {
			StringBuilder buddies = new StringBuilder();
			String delim = "";
			int iCount = 0;
			for (JCheckBox user : _userCheckboxes) {
				if (user.equals(e.getSource())) {
					user.setSelected(((JCheckBox) e.getSource()).isSelected());
				}
				if (user.isSelected()) {
					buddies.append(delim + user.getText());
					delim = ";";
					iCount++;
				}
			}
			if (iCount == _userCheckboxes.size()) {
				_buddy = "$PUBLIC$";
			} else {
				_buddy = buddies.toString();
			}
		}
	}

	@Override
	public void windowActivated(WindowEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void windowClosed(WindowEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void windowClosing(WindowEvent arg0) {
		try {
			_outStream.writeUTF(formatMsgToSrv("$LOGOUT$"));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		_chatZoo.setVisible(false);
		_chatZoo.dispose();
		System.exit(1);
	}

	@Override
	public void windowDeactivated(WindowEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void windowDeiconified(WindowEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void windowIconified(WindowEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void windowOpened(WindowEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void keyPressed(KeyEvent e) {
		if (e.getSource().equals(_chatBox)) {
			if (e.getKeyChar() == KeyEvent.VK_ENTER) {
				sendMessage();
			}
		}
	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub

	}
}
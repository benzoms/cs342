import java.util.Hashtable;

public class NameBuilder implements NameBuilder_Adjectives,
		NameBuilder_AnimalNames {
	public final int DEFAULT_MAX_LEN = 128; // the default maximum length a name
											// that can be returned
	public final int DEFAULT_THRES_LEN = 20; // length of when to choose a short
												// name versus a long name

	private int _maxNameLen; // the actual maximum length a name that can be
								// returned
	private Hashtable<String, Boolean> _generatedNames; // hash of all the names
														// generated
	private Boolean _onlyShortNames;

	/**
	 * construct a NameBuilder
	 */
	public NameBuilder() {
		this._maxNameLen = this.DEFAULT_MAX_LEN;
		this._generatedNames = new Hashtable<String, Boolean>();
		this._onlyShortNames = false;
	}

	/**
	 * @param userLen
	 *            The maximum length this NameBuilder should generate. Only
	 *            applies if greater than or equal to 10 but less than
	 *            DEFAULT_MAX_LEN
	 */
	public NameBuilder(int userLen) {
		this();
		if (userLen < 10)
			this._maxNameLen = 10;
		else if (userLen > this.DEFAULT_MAX_LEN)
			this._maxNameLen = this.DEFAULT_MAX_LEN;
		else
			this._maxNameLen = userLen;

		if (this._maxNameLen < this.DEFAULT_THRES_LEN)
			this._onlyShortNames = true;
	}

	/**
	 * @return a name Generate a name and do not record the name for future use
	 */
	public String generateName() {
		if (this._onlyShortNames) {
			return this.buildShortName();
		} else {
			return this.buildLongName();
		}
	}

	/**
	 * @return a unique name Depending on the maxNameLen, will generate long
	 *         names or short names
	 */
	public String generateUniqueName() {
		if (this._onlyShortNames) {
			String temp = this.buildShortName();
			while (this._generatedNames.contains(temp)
					|| temp.length() > this._maxNameLen) {
				temp = this.buildShortName();
			}
			this._generatedNames.put(temp, true);
			return temp;
		} else {
			String temp = this.buildLongName();
			while (this._generatedNames.contains(temp)
					|| temp.length() > this._maxNameLen) {
				temp = this.buildLongName();
			}
			this._generatedNames.put(temp, true);
			return temp;
		}
	}

	/**
	 * @param name
	 *            the name to be removed from stored names
	 * @return if the value was successfully deleted
	 */
	public boolean removeUniqueName(String name) {
		if (null == this._generatedNames.remove(name))
			return false;
		else
			return true;
	}

	/**
	 * clear all of the stored names
	 */
	public void clearNames() {
		this._generatedNames.clear();
	}

	/*
	 * build a short name
	 */
	private String buildShortName() {
		return this.getAnimalName() + this.getInt();
	}

	/*
	 * build a long name
	 */
	private String buildLongName() {
		return this.getAdjective() + this.getAnimalName() + this.getInt();
	}

	/*
	 * get a random Adjective
	 */
	private String getAdjective() {
		int random = (int) (Math.random() * 1000) % _Adjectives.length;
		return _Adjectives[random];
	}

	/*
	 * get a random Animal Name
	 */
	private String getAnimalName() {
		int random = (int) (Math.random() * 1000) % _AnimalNames.length;
		return _AnimalNames[random];
	}

	/*
	 * get a random Integer
	 */
	private String getInt() {
		return Integer.toString((int) (Math.random() * 1000));
	}
}

package Agents;

import java.io.Serializable;

/**
 * Because socket stream between server and client is plain text we need this
 * data contract so server and client have a standard way of relaying messages.
 * 
 * @author Azita
 * 
 */
public class Message implements Serializable {

        private static final long serialVersionUID = 1L;

        // delimiter used for serialization - must be unique to class
        private final static String DELIMITER = "~";

        // unique identifier of admin as sender
        public final static String ADMIN = "$ADMIN$";
        // recipients
        public final static String ALL_USERS_IN_ROOM = "$ROOM_USERS$";
        public final static String USER = "$USER$";
        // common subjects
        public final static String ROOM_ASSIGNMENT = "$ROOM$";
        public final static String PLAYER_JOINED = "$JOINED$";
        public final static String PLAYER_EXITED = "$EXITED$";
        public final static String START_GAME = "$START$";
        public final static String MESSAGE = "$MESSAGE$";

        // data members
        private Object _sender;
        private Object _recipient;
        private Object _subject;
        private Object _body;

        /**
         * Class Constructor
         */
        public Message(Object sender, Object recipient, Object subject, Object body) {
                _sender = sender;
                _recipient = recipient;
                _subject = subject;
                _body = body;
        }

        /**
         * Get methods to retrieve message information
         * 
         * @return request attribute
         */
        public Object getSender() {
                return _sender;
        }

        public Object getRecipient() {
                return _recipient;
        }

        public Object getSubject() {
                return _subject;
        }

        public Object getBody() {
                return _body;
        }

        /**
         * return string representation of instance for logging
         */
        public String toString() {
                return "getSender: " + _sender.toString() + "\n&" + "getRecipient: "
                                + _recipient.toString() + "\n&" + "getSubject: "
                                + _subject.toString() + "\n&" + "getBody: " + _body.toString()
                                + "\n";
        }
}
